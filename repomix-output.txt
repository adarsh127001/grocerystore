This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.editorconfig
.gitignore
angular.json
instructions.txt
package.json
README.md
src/app/app.component.html
src/app/app.component.spec.ts
src/app/app.component.ts
src/app/app.config.server.ts
src/app/app.config.ts
src/app/app.routes.server.ts
src/app/app.routes.ts
src/app/auth/login/login.component.css
src/app/auth/login/login.component.html
src/app/auth/login/login.component.ts
src/app/auth/register/register.component.css
src/app/auth/register/register.component.html
src/app/auth/register/register.component.ts
src/app/core/services/auth.service.ts
src/app/dashboard/dashboard.component.ts
src/app/home/home.component.ts
src/assets/users.json
src/db.json
src/index.html
src/main.server.ts
src/main.ts
src/server.ts
src/styles.css
tsconfig.app.json
tsconfig.json
tsconfig.spec.json

================================================================
Files
================================================================

================
File: .editorconfig
================
# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single
ij_typescript_use_double_quotes = false

[*.md]
max_line_length = off
trim_trailing_whitespace = false

================
File: .gitignore
================
# See https://docs.github.com/get-started/getting-started-with-git/ignoring-files for more about ignoring files.

# Compiled output
/dist
/tmp
/out-tsc
/bazel-out

# Node
/node_modules
npm-debug.log
yarn-error.log

# IDEs and editors
.idea/
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# Visual Studio Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.history/*

# Miscellaneous
/.angular/cache
.sass-cache/
/connect.lock
/coverage
/libpeerconnection.log
testem.log
/typings

# System files
.DS_Store
Thumbs.db

================
File: angular.json
================
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "grocerystore": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/grocerystore",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": [
              "zone.js"
            ],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "src/styles.css"
            ],
            "scripts": [],
            "server": "src/main.server.ts",
            "outputMode": "server",
            "ssr": {
              "entry": "src/server.ts"
            }
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kB",
                  "maximumError": "1MB"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "4kB",
                  "maximumError": "8kB"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "grocerystore:build:production"
            },
            "development": {
              "buildTarget": "grocerystore:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n"
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": [
              "zone.js",
              "zone.js/testing"
            ],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "src/styles.css"
            ],
            "scripts": []
          }
        }
      }
    }
  }
}

================
File: instructions.txt
================
<main instructions>
WHEN GIVING CODE ALWAYS GIVE IN MARKDOWN AND BEFORE THE MARKDOWN EXPLICITLY TELL THE FILE PATH WHERE THE FILE SHOULD RESIDE FOR ANY FILE
Only Angular Material Allowed for use.
Only go step by step .Ask appropriate questions when necessary.
We need to use reactive forms only and make the forms component reusable such that we can use it at all parts of the application.
Ensure all chart components are reusable with customizable parameters.
Wherever 
We have a huge JSON file with all the data , we shall separate it and create multiple  smaller json files according to requirements and add those in the asset file.
No hardcoding of data.
Yes we shall periodically update the routes file and other required components to ensure functionality
In the account sign up all we need to validate is whether the password and confirm password are the same and these credentials of username and password will get pushed to a separate json file without any encryption.
While logging in the only validation that will be used is whether the username and password matches with the json file  , if user doesn't exist say that or if password is wrong output that.
Always make sure to maintain the appropriate and clean folder structure using concepts like services components and pipes appropriately for simple code.
While logging in we have only one persona that is the manager
In the json if the UTC format is given we need to convert it to normal date dd-mm-yy
In the shipment component first and last column sticky.
We can use highcharts angular wrapper from npm for making a 
When we go to all blog posts we if content is overflowing we must use ellipsis for denoting overflow
When we go inside the specific posts it should have change of image in every 3 seconds for main photo placeholder above the title
We shall implement the maps part at last so leave it for now
Also override the my daily tasks instead of filter just use sort by same as the analysis component 
Refer to the db.json file for ideas

</main instructions>
PROBLEM STATEMENT: Grocery Store Management System

Introduction

The Grocery Management System is designed to provide grocery store managers with a comprehensive and intuitive tool to oversee and optimize store operations. This system will include various dashboards and features to streamline tasks related to inventory and order management, as well as provide valuable insights through data visualization and related articles.

Project Key Features Summary (Manager Login)

Dashboard:

•                Provides a high-level overview with quick access to key metrics and performance indicators.

 

Detailed Dashboard:

•                Allows managers to drill down into specific data points and analyze trends in-depth.

 

Task Creation:

Enables managers to create and manage tasks, categorized into:

•                Order-Related Tasks: For placing and tracking orders with suppliers.

•                Stock-Related Tasks: For managing inventory levels, including restocking and stock audits.

 

Stock Overview Dashboard & Order in Demand Dashboard:

•                Widget View: Interactive widgets displaying real-time data on stock levels, low stock alerts, and inventory turnover rates.

•                Summary Data: Key statistics and metrics summarized in an easy-to-read format.

•                Graphical Representation: Visual charts and graphs to quickly understand stock trends and patterns.

•                Last Created Record: Displays the most recently created stock-related task or record for quick reference.

 

Related Articles for Food and Safety Blogs:

•                Yearly View: Collection of articles and blogs related to food safety, organized by year for easy navigation.

•                Detailed View: Each article has a dedicated page with a structured layout, providing in-depth information and insights on various food safety topics.

 

Tech Stack:

•                     Angular

•                     HTML, CSS, JS

•                     Material UI(optional)

 

Modules:

Project Requirement: Module by Module

Sign-In & Dashboard Page

Sign-In Interface:

 

•                     Develop an engaging sign-in interface for Store Managers that seamlessly transitions to the dashboard.

 

Dashboard Components:

•                     Bar Chart:

•                     Display analysis reports of active and inactive orders.

•                     Sortable by weekly, monthly, and yearly data.

•                     Interactive design that updates upon changing the filter.

•                     Pie Chart:

•                     Represent offline and online data trends.

•                     Include sorting options such as most popular, least popular, high to low, and low to high.

•                     Allow switching between tabs for different data views.

•                     Reusable Chart Component:

•                     Ensure all chart components are reusable with customizable parameters.

•                     Shipment Statistics:

•                     Create a pie chart widget using the reusable component.

•                     Display data for statuses: completed, pending, in-transit, and failed.

•                     Include a "View All" link.

•                     Sample Food Blog Section:

•                     Develop a reusable component for the food blog section.

•                     Include a "View All" link.

 

Navigation and Enhanced Shipment Tracking

Header and Navigation Bar:

•                     Incorporate a comprehensive header and left navigation bar with existing options.

•                     Ensure a sign-out feature at the top right corner.

 

Routing:

•                     Ensure proper routing for all left navigation links.

•                     Implement sign-out functionality that redirects to the sign-in page.

 

Collapsible Navigation Bar:

•                     Implement a collapsible left navigation bar controlled by an icon in the top left corner.

 

Detailed Map View:

•                     On clicking the "View All" link in Shipment Statistics, navigate to a table view page.

•                     Include tabs for All, In-Transit, Pending, Completed, and Failed shipments.

•                     Ensure the table is a reusable component with first and last columns frozen and pagination functionality.

 

Map View:

•                     On clicking the "View Map" link, navigate to a landing page with a default map view.

•                     Display selected shipper details and a list of the latest shipment details on the right side, allowing selection between shipment details.

 

Detailed Task/Stock Management

Overview:

•                     Provide a comprehensive overview of all tasks/stocks.

 

Table Display:

•                     Display a table as per Figma design, showing all statuses.

•                     Include an edit option and pagination for 10 records per page.

 

Sort and Filter Functionalities:

Sort By Dropdown:

•                     Implement a dropdown for sorting based on any column.

 

Filter By Popup:

•                     Introduce a filter by popup with column dropdowns and a text box for specific input.  

 

Edit Modal:

•                     Allow data pre-population upon clicking the edit button.

•                     Open an editing modal that can also be used for creating tasks/stocks.

 

Inventory Management

Overview Page:

•                     Design a page featuring an overview of stocks and a high-demand orders section.

 

Data Retrieval:

•                     Retrieve summary data effectively.

 

Graphical Representation:

•                     Represent total orders graphically.

•                     Sortable by availability and stock status across daily, weekly, monthly, and yearly views.

 

Newly Added Stock Information:

•                     Offer basic information on newly added stock inventory.

•                     Include a "View All" link leading to a dedicated page.

 

Task and Stock Creation:

•                     Facilitate task and stock creation via form submissions.

 

Food Safety Blog Posts

Design Alignment:

•                     Design a page that aligns with provided designs, featuring a yearly selection filter.

 

Dynamic Content Update:

•                     Dynamically update blog content upon selecting a year.

 

Detailed Page Views:

 

•                     Deliver detailed page views in various formats as outlined in the Figma design.


Visual Remarks on the Grocery Store Management System Website

1. Login Page

Design and Layout:
The login page features a clean and modern design with a focus on simplicity and usability.
The background is blurred, highlighting the login form in the foreground, which helps in drawing the user's attention to the login fields.
Typography and Text:
The title "GROCERY STORE MANAGEMENT SYSTEM" is prominently displayed in bold, with "MANAGEMENT SYSTEM" highlighted in blue to emphasize the core functionality.
The subtitle provides a brief description of the system's capabilities, such as inventory management, order tracking, and supplier management.
The form fields for "Username" and "Password" are clearly labeled, with placeholder text to guide the user.
Interactive Elements:
The "Sign In" button is clearly visible and easily accessible.
A link for users who do not have an account is provided, directing them to the sign-up page.
2. Sign-Up Page

Design and Layout:
Similar to the login page, the sign-up page maintains a consistent design with a blurred background and a focused form area.
The form is centrally aligned, ensuring that it is the primary focus for the user.
Form Fields:
The form includes fields for "Username," "Password," and "Confirm Password," all of which are clearly labeled.
The password fields have asterisks indicating required fields and include tooltips (indicated by small icons) to provide additional information if needed.
Interactive Elements:
The "Sign Up" button is prominently displayed at the bottom of the form, encouraging users to complete the registration process.
3. Dashboard

Design and Layout:
The dashboard features a well-organized layout with a sidebar navigation menu on the left and a main content area on the right.
The sidebar includes icons and labels for various sections such as Dashboard, Stocks Management, Shipment Tracking, Reports & Analytics, Customer Management, Food Safety Blogs, Settings, My Account, and Help & Support.
Main Content Area:
The top of the dashboard greets the user with a personalized message, "Hello John Doe!"
The main content area is divided into several sections:
Analysis: Displays a bar and line chart showing active and inactive orders over a six-month period.
My Daily Tasks: A pie chart categorizing tasks into online and offline activities, with segments for cash management, financial reporting, vendors & contracts, and advertising.
Shipment Statistics: A donut chart showing the status of shipments (completed, in-transit, failed, pending).
Food Safety Blogs: A section showcasing recent blog posts related to food safety, with images and brief descriptions.
Interactive Elements:
The dashboard includes search functionality at the top for quick access to different sections.
"Sort By" and "Filter" dropdowns are available for customizing the view of tasks and analysis data.
"View All" links are provided for detailed views of shipment statistics and food safety blogs.
Overall Impression

The Grocery Store Management System website is designed with a user-centric approach, ensuring that all essential functionalities are easily accessible. The use of modern design elements, clear typography, and intuitive navigation enhances the user experience, making it an effective tool for managing grocery store operations.

Visual Remarks on the Website

General Layout and Navigation

Header: The website features a consistent header across all pages with the title "Grocery Store Management – Stocks Management" followed by the specific section name (e.g., Overview, High-Demand Orders, Track Shipment).
Search Bar: A search bar is prominently placed at the top center of the header, allowing users to quickly search for specific information.
User Profile: A user profile icon with initials "JD" is located at the top right corner, indicating user-specific settings or profile information.
Navigation Menu: A vertical navigation menu is situated on the left side, featuring icons for different sections such as Dashboard, Orders, Shipments, and Settings. Each icon is accompanied by a tooltip for easy identification.
Stocks Management - Overview

Tabs: The page is divided into multiple tabs: Stocks Overview, High-Demand Orders, Returns & Defects, and Out of Stock Alerts. The active tab is highlighted.
Overview Analysis: This section provides a summary of key metrics:
Total Orders: 7256 units, with a 10.32% increase.
Total Profit/Loss: 95 units, with a 0.32% decrease.
Total Sales: 347 units, with a 12.32% increase.
Total Customers: 1278 units, with a 1.32% increase.
Total Orders Chart: A bar and line chart displays total orders over six months, differentiating between available and out-of-stock items.
Stock Inventory Table: A detailed table lists stock inventory with columns for Consumer Name, Product, Supplier, Date of Entry, Quantity, Price, Selling Price, and Cashier.
Stocks Management - High-Demand Orders

Tabs: Similar to the Overview page, with the High-Demand Orders tab active.
Overview Analysis Table: A comprehensive table lists high-demand orders with columns for Consumer, Product, Supplier, Date of Entry, Quantity, Price, Selling Price, Cashier, Status, and Action.
Status Indicators: Various status indicators such as Completed, Closed, Failed, and Pending, each with distinct colors for quick identification.
Pagination: The table includes pagination controls at the bottom, allowing navigation through multiple pages of data.
Track Shipment

Tabs: The page includes tabs for All, In-Transit, Completed, Pending, and Failed shipments, with the All tab active.
Shipment Tracking Table: A detailed table lists shipment information with columns for Shipment ID, Shipper Name, Phone Number, Status, Product, Supplier, Quantity, Price, and a Track column with a "View Map" link.
Status Indicators: Similar to the High-Demand Orders page, with status indicators such as Completed, In-Transit, Pending, Closed, and Failed, each color-coded for clarity.
Pagination: Pagination controls are present at the bottom, facilitating navigation through multiple pages of shipment data.
Visual Design

Color Scheme: The website uses a clean and professional color scheme with shades of blue, grey, and white. Status indicators and action buttons are color-coded for quick visual differentiation.
Icons and Buttons: Icons are used effectively in the navigation menu and action buttons, enhancing usability. The "Create New Task" button is prominently displayed in blue for easy access.
Typography: The text is clear and readable, with appropriate font sizes and weights used for headings, subheadings, and body text.
Summary

The website is well-organized and user-friendly, with a consistent layout and intuitive navigation. Key metrics and data are presented clearly, with visual aids such as charts and color-coded status indicators enhancing the user experience. The use of tabs and pagination ensures that large datasets are manageable and accessible.

Visual Remarks on the Website

General Overview

The website appears to be focused on grocery store management and food safety news, featuring a blog section that provides various articles related to these topics. The design is clean, modern, and user-friendly, with a clear layout that enhances readability and navigation.

Homepage (Blog Overview)

Header: The header includes the website title "Grocery Store Management – Food Safety News – Blog" and a search bar for easy navigation.
Sidebar Navigation:
The left sidebar contains icons for different sections, including Home, Blog, Categories, and Settings.
The icons are visually distinct and provide quick access to various parts of the website.
Main Content Area:
The main section is titled "All Blog Posts" and features a grid layout of blog post previews.
Each blog post preview includes an image, title, date, and a brief description.
The posts are visually appealing with high-quality images relevant to the content.
Right Sidebar:
The right sidebar lists "Food Safety News Blogs" categorized by year, allowing users to filter posts by the year of publication.
The current year (2025) is highlighted for easy access.
Individual Blog Post Page

Header: Similar to the homepage, with the website title and search bar.
Breadcrumb Navigation:
Located at the top of the main content area, it shows the current page ("Food Safety News") for easy navigation back to the main blog page.
Main Content Area:
The blog post is prominently displayed with a large header image.
The title, date, and author information are clearly presented below the image.
The content is well-organized with paragraphs and headings, making it easy to read.
Related News Section:
Located on the right side, this section features related blog posts with images, titles, and brief descriptions.
This encourages users to explore more content related to their interests.
Overlays and Modals

Logout Modal:
Displays user information (name and email) and a logout button.
Includes password requirements for security purposes.
Create New Task Modal:
Consists of two tabs: "Task Assignments" and "Add New Stock".
Task Assignments Tab:
Allows users to select task type, assignee, priority level, date & time, and location.
Features dropdown menus and date picker for easy input.
Add New Stock Tab:
Users can select product type, supplier, total quantity, price, and selling price.
Includes sliders for quantity and price adjustments, providing a user-friendly interface for input.
Design and Usability

Color Scheme: The website uses a soothing color palette with shades of blue and white, creating a professional and clean look.
Typography: The fonts are clear and legible, with appropriate sizes for headings, subheadings, and body text.
Icons and Images: High-quality icons and images enhance the visual appeal and provide context to the content.
Navigation: The layout is intuitive, with easy access to different sections through the sidebar and clear categorization of blog posts.
Conclusion

The website is well-designed with a focus on user experience. It provides valuable content related to grocery store management and food safety, presented in an organized and visually appealing manner. The use of modals for tasks and stock management indicates a comprehensive approach to functionality, catering to the needs of its users effectively.

Visual Remarks on Website Design from Attached Image

General Layout

The website features a clean and organized layout with two main interactive elements: a sorting chip and a filter chip.
Both chips are enclosed in dotted purple rectangles, indicating their interactive nature and separation from other content.
Sorting Chip

Label: The sorting chip is labeled "Sorting chip" at the top.
Dropdown Button: There is a dropdown button labeled "Sort By".
Options: The dropdown menu includes the following options:
Last Week
Last Month
Last Quarter
Last 6 months
Selected Option Display: Below the dropdown button, the currently selected sorting option is displayed in a separate button, which in this case is "Last 6 months".
Filter Chip

Label: The filter chip is labeled "Filter chip" at the top.
Dropdown Button: There is a dropdown button labeled "Filter".
Options: The dropdown menu includes the following options:
Most Popular
Low to High
High to Low
Top Rated
Selected Option Display: Below the dropdown button, the currently selected filter option is displayed in a separate button, which in this case is "Most Popular".
Design Elements

Color Scheme: The dropdown buttons and selected option buttons have a blue outline and text, which contrasts well with the light grey background.
Typography: The text within the dropdown menus and buttons is clear and legible, using a simple sans-serif font.
Spacing: There is adequate spacing between the elements, ensuring that the interface is not cluttered and is easy to navigate.
User Interaction

Dropdown Interaction: Users can interact with the dropdown buttons to select their preferred sorting and filtering options.
Visual Feedback: The selected option is displayed prominently below the dropdown button, providing immediate visual feedback to the user.
Summary

The website design is user-friendly, with clearly labeled and easily accessible sorting and filtering options. The use of color and spacing enhances readability and usability, making it straightforward for users to interact with the sorting and filtering functionalities.

================
File: package.json
================
{
  "name": "grocerystore",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test",
    "serve:ssr:grocerystore": "node dist/grocerystore/server/server.mjs"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^19.2.0",
    "@angular/common": "^19.2.0",
    "@angular/compiler": "^19.2.0",
    "@angular/core": "^19.2.0",
    "@angular/forms": "^19.2.0",
    "@angular/material": "^19.2.1",
    "@angular/platform-browser": "^19.2.0",
    "@angular/platform-browser-dynamic": "^19.2.0",
    "@angular/platform-server": "^19.2.0",
    "@angular/router": "^19.2.0",
    "@angular/ssr": "^19.2.0",
    "express": "^4.18.2",
    "repomix": "^0.2.33",
    "rxjs": "~7.8.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.15.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^19.2.0",
    "@angular/cli": "^19.2.0",
    "@angular/compiler-cli": "^19.2.0",
    "@types/express": "^4.17.17",
    "@types/jasmine": "~5.1.0",
    "@types/node": "^18.18.0",
    "jasmine-core": "~5.6.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "typescript": "~5.7.2"
  }
}

================
File: README.md
================
# Grocerystore

This project was generated using [Angular CLI](https://github.com/angular/angular-cli) version 19.2.0.

## Development server

To start a local development server, run:

```bash
ng serve
```

Once the server is running, open your browser and navigate to `http://localhost:4200/`. The application will automatically reload whenever you modify any of the source files.

## Code scaffolding

Angular CLI includes powerful code scaffolding tools. To generate a new component, run:

```bash
ng generate component component-name
```

For a complete list of available schematics (such as `components`, `directives`, or `pipes`), run:

```bash
ng generate --help
```

## Building

To build the project run:

```bash
ng build
```

This will compile your project and store the build artifacts in the `dist/` directory. By default, the production build optimizes your application for performance and speed.

## Running unit tests

To execute unit tests with the [Karma](https://karma-runner.github.io) test runner, use the following command:

```bash
ng test
```

## Running end-to-end tests

For end-to-end (e2e) testing, run:

```bash
ng e2e
```

Angular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.

## Additional Resources

For more information on using the Angular CLI, including detailed command references, visit the [Angular CLI Overview and Command Reference](https://angular.dev/tools/cli) page.

================
File: src/app/app.component.html
================
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * * * The content below * * * * * * * * * * * -->
<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->
<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * Delete the template below * * * * * * * * * -->
<!-- * * * * * * * to get started with your project! * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->

<style>
  :host {
    --bright-blue: oklch(51.01% 0.274 263.83);
    --electric-violet: oklch(53.18% 0.28 296.97);
    --french-violet: oklch(47.66% 0.246 305.88);
    --vivid-pink: oklch(69.02% 0.277 332.77);
    --hot-red: oklch(61.42% 0.238 15.34);
    --orange-red: oklch(63.32% 0.24 31.68);

    --gray-900: oklch(19.37% 0.006 300.98);
    --gray-700: oklch(36.98% 0.014 302.71);
    --gray-400: oklch(70.9% 0.015 304.04);

    --red-to-pink-to-purple-vertical-gradient: linear-gradient(
      180deg,
      var(--orange-red) 0%,
      var(--vivid-pink) 50%,
      var(--electric-violet) 100%
    );

    --red-to-pink-to-purple-horizontal-gradient: linear-gradient(
      90deg,
      var(--orange-red) 0%,
      var(--vivid-pink) 50%,
      var(--electric-violet) 100%
    );

    --pill-accent: var(--bright-blue);

    font-family: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
      "Segoe UI Symbol";
    box-sizing: border-box;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  h1 {
    font-size: 3.125rem;
    color: var(--gray-900);
    font-weight: 500;
    line-height: 100%;
    letter-spacing: -0.125rem;
    margin: 0;
    font-family: "Inter Tight", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
      "Segoe UI Symbol";
  }

  p {
    margin: 0;
    color: var(--gray-700);
  }

  main {
    width: 100%;
    min-height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 1rem;
    box-sizing: inherit;
    position: relative;
  }

  .angular-logo {
    max-width: 9.2rem;
  }

  .content {
    display: flex;
    justify-content: space-around;
    width: 100%;
    max-width: 700px;
    margin-bottom: 3rem;
  }

  .content h1 {
    margin-top: 1.75rem;
  }

  .content p {
    margin-top: 1.5rem;
  }

  .divider {
    width: 1px;
    background: var(--red-to-pink-to-purple-vertical-gradient);
    margin-inline: 0.5rem;
  }

  .pill-group {
    display: flex;
    flex-direction: column;
    align-items: start;
    flex-wrap: wrap;
    gap: 1.25rem;
  }

  .pill {
    display: flex;
    align-items: center;
    --pill-accent: var(--bright-blue);
    background: color-mix(in srgb, var(--pill-accent) 5%, transparent);
    color: var(--pill-accent);
    padding-inline: 0.75rem;
    padding-block: 0.375rem;
    border-radius: 2.75rem;
    border: 0;
    transition: background 0.3s ease;
    font-family: var(--inter-font);
    font-size: 0.875rem;
    font-style: normal;
    font-weight: 500;
    line-height: 1.4rem;
    letter-spacing: -0.00875rem;
    text-decoration: none;
  }

  .pill:hover {
    background: color-mix(in srgb, var(--pill-accent) 15%, transparent);
  }

  .pill-group .pill:nth-child(6n + 1) {
    --pill-accent: var(--bright-blue);
  }
  .pill-group .pill:nth-child(6n + 2) {
    --pill-accent: var(--french-violet);
  }
  .pill-group .pill:nth-child(6n + 3),
  .pill-group .pill:nth-child(6n + 4),
  .pill-group .pill:nth-child(6n + 5) {
    --pill-accent: var(--hot-red);
  }

  .pill-group svg {
    margin-inline-start: 0.25rem;
  }

  .social-links {
    display: flex;
    align-items: center;
    gap: 0.73rem;
    margin-top: 1.5rem;
  }

  .social-links path {
    transition: fill 0.3s ease;
    fill: var(--gray-400);
  }

  .social-links a:hover svg path {
    fill: var(--gray-900);
  }

  @media screen and (max-width: 650px) {
    .content {
      flex-direction: column;
      width: max-content;
    }

    .divider {
      height: 1px;
      width: 100%;
      background: var(--red-to-pink-to-purple-horizontal-gradient);
      margin-block: 1.5rem;
    }
  }
</style>

<main class="main">
  <div class="content">
    <div class="left-side">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 982 239"
        fill="none"
        class="angular-logo"
      >
        <g clip-path="url(#a)">
          <path
            fill="url(#b)"
            d="M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z"
          />
          <path
            fill="url(#c)"
            d="M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z"
          />
        </g>
        <defs>
          <radialGradient
            id="c"
            cx="0"
            cy="0"
            r="1"
            gradientTransform="rotate(118.122 171.182 60.81) scale(205.794)"
            gradientUnits="userSpaceOnUse"
          >
            <stop stop-color="#FF41F8" />
            <stop offset=".707" stop-color="#FF41F8" stop-opacity=".5" />
            <stop offset="1" stop-color="#FF41F8" stop-opacity="0" />
          </radialGradient>
          <linearGradient
            id="b"
            x1="0"
            x2="982"
            y1="192"
            y2="192"
            gradientUnits="userSpaceOnUse"
          >
            <stop stop-color="#F0060B" />
            <stop offset="0" stop-color="#F0070C" />
            <stop offset=".526" stop-color="#CC26D5" />
            <stop offset="1" stop-color="#7702FF" />
          </linearGradient>
          <clipPath id="a"><path fill="#fff" d="M0 0h982v239H0z" /></clipPath>
        </defs>
      </svg>
      <h1>Hello, {{ title }}</h1>
      <p>Congratulations! Your app is running. 🎉</p>
    </div>
    <div class="divider" role="separator" aria-label="Divider"></div>
    <div class="right-side">
      <div class="pill-group">
        @for (item of [
          { title: 'Explore the Docs', link: 'https://angular.dev' },
          { title: 'Learn with Tutorials', link: 'https://angular.dev/tutorials' },
          { title: 'CLI Docs', link: 'https://angular.dev/tools/cli' },
          { title: 'Angular Language Service', link: 'https://angular.dev/tools/language-service' },
          { title: 'Angular DevTools', link: 'https://angular.dev/tools/devtools' },
        ]; track item.title) {
          <a
            class="pill"
            [href]="item.link"
            target="_blank"
            rel="noopener"
          >
            <span>{{ item.title }}</span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              height="14"
              viewBox="0 -960 960 960"
              width="14"
              fill="currentColor"
            >
              <path
                d="M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h280v80H200v560h560v-280h80v280q0 33-23.5 56.5T760-120H200Zm188-212-56-56 372-372H560v-80h280v280h-80v-144L388-332Z"
              />
            </svg>
          </a>
        }
      </div>
      <div class="social-links">
        <a
          href="https://github.com/angular/angular"
          aria-label="Github"
          target="_blank"
          rel="noopener"
        >
          <svg
            width="25"
            height="24"
            viewBox="0 0 25 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            alt="Github"
          >
            <path
              d="M12.3047 0C5.50634 0 0 5.50942 0 12.3047C0 17.7423 3.52529 22.3535 8.41332 23.9787C9.02856 24.0946 9.25414 23.7142 9.25414 23.3871C9.25414 23.0949 9.24389 22.3207 9.23876 21.2953C5.81601 22.0377 5.09414 19.6444 5.09414 19.6444C4.53427 18.2243 3.72524 17.8449 3.72524 17.8449C2.61064 17.082 3.81137 17.0973 3.81137 17.0973C5.04697 17.1835 5.69604 18.3647 5.69604 18.3647C6.79321 20.2463 8.57636 19.7029 9.27978 19.3881C9.39052 18.5924 9.70736 18.0499 10.0591 17.7423C7.32641 17.4347 4.45429 16.3765 4.45429 11.6618C4.45429 10.3185 4.9311 9.22133 5.72065 8.36C5.58222 8.04931 5.16694 6.79833 5.82831 5.10337C5.82831 5.10337 6.85883 4.77319 9.2121 6.36459C10.1965 6.09082 11.2424 5.95546 12.2883 5.94931C13.3342 5.95546 14.3801 6.09082 15.3644 6.36459C17.7023 4.77319 18.7328 5.10337 18.7328 5.10337C19.3942 6.79833 18.9789 8.04931 18.8559 8.36C19.6403 9.22133 20.1171 10.3185 20.1171 11.6618C20.1171 16.3888 17.2409 17.4296 14.5031 17.7321C14.9338 18.1012 15.3337 18.8559 15.3337 20.0084C15.3337 21.6552 15.3183 22.978 15.3183 23.3779C15.3183 23.7009 15.5336 24.0854 16.1642 23.9623C21.0871 22.3484 24.6094 17.7341 24.6094 12.3047C24.6094 5.50942 19.0999 0 12.3047 0Z"
            />
          </svg>
        </a>
        <a
          href="https://twitter.com/angular"
          aria-label="Twitter"
          target="_blank"
          rel="noopener"
        >
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            alt="Twitter"
          >
            <path
              d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"
            />
          </svg>
        </a>
        <a
          href="https://www.youtube.com/channel/UCbn1OgGei-DV7aSRo_HaAiw"
          aria-label="Youtube"
          target="_blank"
          rel="noopener"
        >
          <svg
            width="29"
            height="20"
            viewBox="0 0 29 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            alt="Youtube"
          >
            <path
              fill-rule="evenodd"
              clip-rule="evenodd"
              d="M27.4896 1.52422C27.9301 1.96749 28.2463 2.51866 28.4068 3.12258C29.0004 5.35161 29.0004 10 29.0004 10C29.0004 10 29.0004 14.6484 28.4068 16.8774C28.2463 17.4813 27.9301 18.0325 27.4896 18.4758C27.0492 18.9191 26.5 19.2389 25.8972 19.4032C23.6778 20 14.8068 20 14.8068 20C14.8068 20 5.93586 20 3.71651 19.4032C3.11363 19.2389 2.56449 18.9191 2.12405 18.4758C1.68361 18.0325 1.36732 17.4813 1.20683 16.8774C0.613281 14.6484 0.613281 10 0.613281 10C0.613281 10 0.613281 5.35161 1.20683 3.12258C1.36732 2.51866 1.68361 1.96749 2.12405 1.52422C2.56449 1.08095 3.11363 0.76113 3.71651 0.596774C5.93586 0 14.8068 0 14.8068 0C14.8068 0 23.6778 0 25.8972 0.596774C26.5 0.76113 27.0492 1.08095 27.4896 1.52422ZM19.3229 10L11.9036 5.77905V14.221L19.3229 10Z"
            />
          </svg>
        </a>
      </div>
    </div>
  </div>
</main>

<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * * * The content above * * * * * * * * * * * * -->
<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * * -->
<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * * End of Placeholder  * * * * * * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->


<router-outlet />

================
File: src/app/app.component.spec.ts
================
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have the 'grocerystore' title`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('grocerystore');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, grocerystore');
  });
});

================
File: src/app/app.component.ts
================
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet, CommonModule],
  template: `<router-outlet></router-outlet>`,
  styles: []
})
export class AppComponent {
  title = 'Grocery Store Management System';
}

================
File: src/app/app.config.server.ts
================
import { mergeApplicationConfig, ApplicationConfig } from '@angular/core';
import { provideServerRendering } from '@angular/platform-server';
import { provideServerRouting } from '@angular/ssr';
import { appConfig } from './app.config';
import { serverRoutes } from './app.routes.server';

const serverConfig: ApplicationConfig = {
  providers: [
    provideServerRendering(),
    provideServerRouting(serverRoutes)
  ]
};

export const config = mergeApplicationConfig(appConfig, serverConfig);

================
File: src/app/app.config.ts
================
import { ApplicationConfig } from '@angular/core';
import { provideRouter } from '@angular/router';
import { routes } from './app.routes';
import { provideClientHydration } from '@angular/platform-browser';
import { provideHttpClient } from '@angular/common/http';
import { provideAnimations } from '@angular/platform-browser/animations';

export const appConfig: ApplicationConfig = {
  providers: [
    provideRouter(routes),
    provideClientHydration(),
    provideHttpClient(),
    provideAnimations()
  ]
};

================
File: src/app/app.routes.server.ts
================
import { RenderMode, ServerRoute } from '@angular/ssr';

export const serverRoutes: ServerRoute[] = [
  {
    path: '**',
    renderMode: RenderMode.Prerender
  }
];

================
File: src/app/app.routes.ts
================
import { Routes } from '@angular/router';

export const routes: Routes = [
  { path: '', redirectTo: '/home', pathMatch: 'full' },
  { path: 'home', loadComponent: () => import('./home/home.component').then(c => c.HomeComponent) },
  { path: 'login', loadComponent: () => import('./auth/login/login.component').then(c => c.LoginComponent) },
  { path: 'register', loadComponent: () => import('./auth/register/register.component').then(c => c.RegisterComponent) },
  { path: 'dashboard', loadComponent: () => import('./dashboard/dashboard.component').then(c => c.DashboardComponent) },
  { path: '**', redirectTo: '/home' }
];

================
File: src/app/auth/login/login.component.css
================
.login-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #f5f5f5;
  background-image: url('/assets/images/grocery-bg.jpg');
  background-size: cover;
  background-position: center;
  position: relative;
}

.login-container::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  backdrop-filter: blur(8px);
  background-color: rgba(255, 255, 255, 0.6);
}

mat-card {
  width: 100%;
  max-width: 400px;
  padding: 2rem;
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
  position: relative;
  z-index: 1;
}

mat-card-header {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 2rem;
}

mat-card-title h1 {
  text-align: center;
  font-weight: 700;
  margin-bottom: 0.5rem;
}

.highlight {
  color: #1976d2;
}

mat-card-subtitle {
  text-align: center;
  max-width: 320px;
  margin: 0 auto;
}

.full-width {
  width: 100%;
  margin-bottom: 1rem;
}

mat-spinner {
  display: inline-block;
  margin-right: 8px;
}

.error-message {
  color: #f44336;
  margin-bottom: 1rem;
  text-align: center;
}

.register-link {
  margin-top: 1.5rem;
  text-align: center;
}

.register-link a {
  margin-left: 5px;
  color: #1976d2;
  text-decoration: none;
}

.register-link a:hover {
  text-decoration: underline;
}

================
File: src/app/auth/login/login.component.html
================
<div class="login-container">
  <mat-card>
    <mat-card-header>
      <mat-card-title>
        <h1>GROCERY STORE <span class="highlight">MANAGEMENT SYSTEM</span></h1>
      </mat-card-title>
      <mat-card-subtitle>
        Manage inventory, track orders, and oversee supplier relationships efficiently.
      </mat-card-subtitle>
    </mat-card-header>
    
    <mat-card-content>
      <form [formGroup]="loginForm" (ngSubmit)="onSubmit()">
        <mat-form-field appearance="outline" class="full-width">
          <mat-label>Username</mat-label>
          <input matInput formControlName="username" placeholder="Enter your username">
          <mat-error *ngIf="loginForm.get('username')?.hasError('required')">
            Username is required
          </mat-error>
        </mat-form-field>
        
        <mat-form-field appearance="outline" class="full-width">
          <mat-label>Password</mat-label>
          <input matInput type="password" formControlName="password" placeholder="Enter your password">
          <mat-error *ngIf="loginForm.get('password')?.hasError('required')">
            Password is required
          </mat-error>
        </mat-form-field>
        
        <div *ngIf="loginError" class="error-message">
          {{ loginError }}
        </div>
        
        <button mat-raised-button color="primary" type="submit" [disabled]="loginForm.invalid || isLoading" class="full-width">
          <mat-spinner diameter="20" *ngIf="isLoading"></mat-spinner>
          <span *ngIf="!isLoading">Sign In</span>
        </button>
        
        <div class="register-link">
          <span>Don't have an account?</span>
          <a [routerLink]="['/register']">Register</a>
        </div>
      </form>
    </mat-card-content>
  </mat-card>
</div>

================
File: src/app/auth/login/login.component.ts
================
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { Router, RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
import { MatCardModule } from '@angular/material/card';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    MatCardModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatProgressSpinnerModule,
    MatSnackBarModule,
    RouterModule
  ],
  templateUrl: './login.component.html',
  styleUrl: './login.component.css'
})
export class LoginComponent implements OnInit {
  loginForm: FormGroup;
  isLoading = false;
  loginError: string | null = null;

  constructor(
    private fb: FormBuilder,
    private http: HttpClient,
    private router: Router,
    private snackBar: MatSnackBar
  ) {
    this.loginForm = this.fb.group({
      username: ['', [Validators.required]],
      password: ['', [Validators.required]]
    });
  }

  ngOnInit() {
    // Test the HTTP call separately to check if it works
    this.http.get<{users: any[]}>('assets/users.json').subscribe({
      next: (data) => {
        console.log('Successfully loaded users.json:', data);
      },
      error: (error) => {
        console.error('Error loading users.json during init:', error);
      }
    });
  }

  onSubmit(): void {
    if (this.loginForm.valid) {
      this.isLoading = true;
      const { username, password } = this.loginForm.value;
      
      console.log('Attempting login with:', { username, password });

      // Hardcoded credential check as a fallback
      if (username === 'a' && password === 'a') {
        console.log('Hardcoded login successful');
        sessionStorage.setItem('isLoggedIn', 'true');
        sessionStorage.setItem('currentUser', username);
        this.router.navigate(['/dashboard']);
        return;
      }
      
      // Check localStorage for registered users first
      const storedUsersStr = localStorage.getItem('registeredUsers');
      if (storedUsersStr) {
        try {
          const storedUsers = JSON.parse(storedUsersStr);
          const user = storedUsers.find((u: {username: string, password: string}) => 
            u.username === username && u.password === password);
          
          if (user) {
            console.log('Login successful from localStorage');
            this.isLoading = false;
            sessionStorage.setItem('isLoggedIn', 'true');
            sessionStorage.setItem('currentUser', user.username);
            this.router.navigate(['/dashboard']);
            return;
          }
        } catch (e) {
          console.error('Error parsing stored users:', e);
        }
      }
      
      // If not found in localStorage, check users.json file
      this.http.get<{users: {username: string, password: string}[]}>('assets/users.json').subscribe({
        next: (data) => {
          console.log('Login response data:', data);
          
          if (!data || !data.users) {
            console.error('Invalid users.json structure:', data);
            this.isLoading = false;
            this.loginError = 'Invalid user data format';
            return;
          }
          
          const user = data.users.find(u => 
            u.username === username && u.password === password);
          
          this.isLoading = false;
          
          if (user) {
            console.log('User found in JSON file, navigating to dashboard');
            sessionStorage.setItem('isLoggedIn', 'true');
            sessionStorage.setItem('currentUser', user.username);
            this.router.navigate(['/dashboard']);
          } else {
            console.log('User not found in JSON file or localStorage');
            this.loginError = 'Invalid username or password';
            this.snackBar.open('Invalid username or password', 'Close', {
              duration: 5000
            });
          }
        },
        error: (error) => {
          this.isLoading = false;
          console.error('Error loading users.json during login:', error);
          this.loginError = 'Login failed';
          this.snackBar.open('Login failed. Please try again.', 'Close', {
            duration: 5000
          });
        }
      });
    }
  }
}

================
File: src/app/auth/register/register.component.css
================
.register-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #f5f5f5;
}

mat-card {
  width: 100%;
  max-width: 400px;
  padding: 2rem;
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
}

mat-card-header {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 2rem;
}

mat-card-title h1 {
  text-align: center;
  font-weight: 700;
  margin-bottom: 0.5rem;
}

.highlight {
  color: #1976d2;
}

mat-card-subtitle {
  text-align: center;
  max-width: 320px;
  margin: 0 auto;
}

.full-width {
  width: 100%;
  margin-bottom: 1rem;
}

mat-spinner {
  display: inline-block;
  margin-right: 8px;
}

.error-message {
  color: #f44336;
  margin-bottom: 1rem;
  text-align: center;
}

.login-link {
  margin-top: 1.5rem;
  text-align: center;
}

.login-link a {
  margin-left: 5px;
  color: #1976d2;
  text-decoration: none;
}

.login-link a:hover {
  text-decoration: underline;
}

================
File: src/app/auth/register/register.component.html
================
<div class="register-container">
  <mat-card>
    <mat-card-header>
      <mat-card-title>
        <h1>Create an <span class="highlight">Account</span></h1>
      </mat-card-title>
      <mat-card-subtitle>
        Sign up to access the Grocery Store Management System
      </mat-card-subtitle>
    </mat-card-header>
    
    <mat-card-content>
      <form [formGroup]="registerForm" (ngSubmit)="onSubmit()">
        <mat-form-field appearance="outline" class="full-width">
          <mat-label>Username</mat-label>
          <input matInput formControlName="username" placeholder="Enter your username">
          <mat-error *ngIf="registerForm.get('username')?.hasError('required')">
            Username is required
          </mat-error>
        </mat-form-field>
        
        <mat-form-field appearance="outline" class="full-width">
          <mat-label>Password</mat-label>
          <input matInput type="password" formControlName="password" placeholder="Enter your password">
          <mat-error *ngIf="registerForm.get('password')?.hasError('required')">
            Password is required
          </mat-error>
        </mat-form-field>
        
        <mat-form-field appearance="outline" class="full-width">
          <mat-label>Confirm Password</mat-label>
          <input matInput type="password" formControlName="confirmPassword" placeholder="Confirm your password">
          <mat-error *ngIf="registerForm.get('confirmPassword')?.hasError('required')">
            Password confirmation is required
          </mat-error>
        </mat-form-field>
        
        <div *ngIf="registerForm.hasError('passwordMismatch') && !registerForm.get('confirmPassword')?.hasError('required')" class="error-message">
          Passwords don't match
        </div>
        
        <div *ngIf="registerError" class="error-message">
          {{ registerError }}
        </div>
        
        <button mat-raised-button color="primary" type="submit" [disabled]="registerForm.invalid || isLoading" class="full-width">
          <mat-spinner diameter="20" *ngIf="isLoading"></mat-spinner>
          <span *ngIf="!isLoading">Register</span>
        </button>
        
        <div class="login-link">
          <span>Already have an account?</span>
          <a [routerLink]="['/login']">Log in</a>
        </div>
      </form>
    </mat-card-content>
  </mat-card>
</div>

================
File: src/app/auth/register/register.component.ts
================
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { Router, RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
import { MatCardModule } from '@angular/material/card';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-register',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    RouterModule,
    MatCardModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatProgressSpinnerModule,
    MatSnackBarModule
  ],
  templateUrl: './register.component.html',
  styleUrl: './register.component.css'
})
export class RegisterComponent {
  registerForm: FormGroup;
  isLoading = false;
  registerError: string | null = null;

  constructor(
    private fb: FormBuilder,
    private http: HttpClient,
    private router: Router,
    private snackBar: MatSnackBar
  ) {
    this.registerForm = this.fb.group({
      username: ['', [Validators.required]],
      password: ['', [Validators.required]],
      confirmPassword: ['', [Validators.required]]
    }, { validator: this.checkPasswords });
  }

  // Custom validator to check if password and confirmPassword match
  checkPasswords(group: FormGroup) {
    const password = group.get('password')?.value;
    const confirmPassword = group.get('confirmPassword')?.value;

    return password === confirmPassword ? null : { passwordMismatch: true };
  }

  onSubmit(): void {
    if (this.registerForm.valid) {
      this.isLoading = true;
      this.registerError = null;
      const { username, password } = this.registerForm.value;
      
      // First, load existing users
      this.http.get<{users: {username: string, password: string}[]}>('assets/users.json').subscribe({
        next: (data) => {
          let users = data.users || [];
          
          // Check if username already exists
          if (users.some(u => u.username === username)) {
            this.isLoading = false;
            this.registerError = 'Username already exists';
            this.snackBar.open('Username already exists', 'Close', {
              duration: 5000
            });
            return;
          }
          
          // Add new user
          users.push({ username, password });
          
          // Store in localStorage since we can't modify the file directly
          localStorage.setItem('registeredUsers', JSON.stringify(users));
          
          this.isLoading = false;
          this.snackBar.open('Registration successful! Please login.', 'Close', {
            duration: 5000
          });
          this.router.navigate(['/login']);
        },
        error: (error) => {
          console.error('Error loading users during registration:', error);
          
          // Fallback: create new users array
          const users = [{ username, password }];
          localStorage.setItem('registeredUsers', JSON.stringify(users));
          
          this.isLoading = false;
          this.snackBar.open('Registration successful! Please login.', 'Close', {
            duration: 5000
          });
          this.router.navigate(['/login']);
        }
      });
    }
  }
}

================
File: src/app/core/services/auth.service.ts
================
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, Observable, of } from 'rxjs';
import { map, catchError, tap } from 'rxjs/operators';

interface User {
  username: string;
  password: string;
}

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private isLoggedInSubject = new BehaviorSubject<boolean>(false);
  public isLoggedIn = this.isLoggedInSubject.asObservable();
  private currentUserSubject = new BehaviorSubject<string | null>(null);
  public currentUser = this.currentUserSubject.asObservable();
  
  // In-memory users for development
  private users: User[] = [
    { username: 'a', password: 'a' }
  ];

  constructor(private http: HttpClient) {
    // Load users from JSON initially
    this.loadUsers();
  }

  private loadUsers(): void {
    this.http.get<{users: User[]}>('assets/users.json')
      .subscribe(data => {
        if (data && data.users) {
          this.users = data.users;
          console.log('Users loaded:', this.users);
        }
      }, error => {
        console.error('Error loading users:', error);
      });
  }

  login(username: string, password: string): Observable<boolean> {
    // Simple login check
    console.log('Login attempt:', username, password);
    console.log('Available users:', this.users);
    
    const user = this.users.find(u => 
      u.username === username && u.password === password);
    
    const success = !!user;
    
    if (success) {
      this.isLoggedInSubject.next(true);
      this.currentUserSubject.next(username);
    }
    
    console.log('Login success:', success);
    return of(success);
  }
  
  registerUser(username: string, password: string): Observable<boolean> {
    // Check if user already exists
    if (this.users.some(u => u.username === username)) {
      return of(false);
    }
    
    // Add user to in-memory array
    this.users.push({ username, password });
    
    // In a real app, we'd call an API to save the new user
    console.log('New user registered:', { username, password });
    console.log('Updated users list:', this.users);
    
    return of(true);
  }

  logout(): void {
    this.isLoggedInSubject.next(false);
    this.currentUserSubject.next(null);
  }

  isAuthenticated(): boolean {
    return this.isLoggedInSubject.value;
  }
}

================
File: src/app/dashboard/dashboard.component.ts
================
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatCardModule } from '@angular/material/card';
import { Router } from '@angular/router';

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [
    CommonModule, 
    RouterModule,
    MatToolbarModule,
    MatButtonModule,
    MatIconModule,
    MatCardModule
  ],
  template: `
    <div class="dashboard-container">
      <mat-toolbar color="primary">
        <span>Grocery Store Management System</span>
        <span class="spacer"></span>
        <span>Welcome, {{getCurrentUser()}}</span>
        <button mat-icon-button (click)="logout()">
          <mat-icon>logout</mat-icon>
        </button>
      </mat-toolbar>
      
      <div class="content">
        <h1>Dashboard</h1>
        <p>Welcome to the Grocery Store Management System!</p>
        
        <div class="card-container">
          <mat-card>
            <mat-card-header>
              <mat-card-title>Inventory Management</mat-card-title>
            </mat-card-header>
            <mat-card-content>
              <p>Manage your store's inventory items</p>
            </mat-card-content>
            <mat-card-actions>
              <button mat-button>OPEN</button>
            </mat-card-actions>
          </mat-card>
          
          <mat-card>
            <mat-card-header>
              <mat-card-title>Order Tracking</mat-card-title>
            </mat-card-header>
            <mat-card-content>
              <p>View and manage customer orders</p>
            </mat-card-content>
            <mat-card-actions>
              <button mat-button>OPEN</button>
            </mat-card-actions>
          </mat-card>
        </div>
      </div>
    </div>
  `,
  styles: [`
    .dashboard-container {
      height: 100vh;
      display: flex;
      flex-direction: column;
    }
    .spacer {
      flex: 1 1 auto;
    }
    .content {
      padding: 20px;
    }
    .card-container {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-top: 20px;
    }
    mat-card {
      width: 300px;
    }
  `]
})
export class DashboardComponent {
  
  constructor(private router: Router) {}
  
  getCurrentUser(): string {
    return sessionStorage.getItem('currentUser') || 'User';
  }
  
  logout(): void {
    sessionStorage.removeItem('isLoggedIn');
    sessionStorage.removeItem('currentUser');
    this.router.navigate(['/login']);
  }
}

================
File: src/app/home/home.component.ts
================
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [CommonModule, RouterModule],
  template: `
    <div style="padding: 20px; text-align: center;">
      <h1>Grocery Store Management</h1>
      <p>Welcome to our management system</p>
      <a routerLink="/login">Login</a>
    </div>
  `,
  styles: []
})
export class HomeComponent {}

================
File: src/assets/users.json
================
{
  "users": [
    {
      "username": "a",
      "password": "a"
    }
  ]
}

================
File: src/db.json
================
{

    "stockInventorySummary": [

        {

            "title": "Orders",

            "units": 7256,

            "status": 10.32

        },

        {

            "title": "Profit/Loss",

            "units": 95,

            "status": -0.32

        },

        {

            "title": "Sales",

            "units": 347,

            "status": 12.32

        },

        {

            "title": "Customenrs",

            "units": 1278,

            "status": 2.45

        }

    ],

    "stockInventoryList": [

        {

            "customentName": "Roman Pearce",

            "product": "cornflakes",

            "supplier": "kellogs",

            "dateOfEntry": "2025-02-27T00:00:00",

            "quantity": 634,

            "price": 100,

            "sellingPrice": 123,

            "cashier": "Brain o'Conner",

            "status": "completed"

        },

        {

            "customentName": "Dominic Toretto",

            "product": "milk",

            "supplier": "dairyland",

            "dateOfEntry": "2025-02-28T00:00:00",

            "quantity": 200,

            "price": 50,

            "sellingPrice": 60,

            "cashier": "Letty Ortiz",

            "status": "completed"

        },

        {

            "customentName": "Brian O'Conner",

            "product": "bread",

            "supplier": "wonder",

            "dateOfEntry": "2025-03-01T00:00:00",

            "quantity": 150,

            "price": 20,

            "sellingPrice": 25,

            "cashier": "Mia Toretto",

            "status": "completed"

        },

        {

            "customentName": "Letty Ortiz",

            "product": "eggs",

            "supplier": "farm fresh",

            "dateOfEntry": "2025-02-27T00:00:00",

            "quantity": 300,

            "price": 10,

            "sellingPrice": 12,

            "cashier": "Dominic Toretto",

            "status": "completed"

        },

        {

            "customentName": "Mia Toretto",

            "product": "butter",

            "supplier": "amul",

            "dateOfEntry": "2025-02-24T00:00:00",

            "quantity": 100,

            "price": 40,

            "sellingPrice": 45,

            "cashier": "Roman Pearce",

            "status": "completed"

        },

        {

            "customentName": "Tej Parker",

            "product": "cheese",

            "supplier": "kraft",

            "dateOfEntry": "2025-02-25T00:00:00",

            "quantity": 120,

            "price": 60,

            "sellingPrice": 70,

            "cashier": "Brian O'Conner",

            "status": "completed"

        },

        {

            "customentName": "Han Lue",

            "product": "yogurt",

            "supplier": "chobani",

            "dateOfEntry": "2025-02-20T00:00:00",

            "quantity": 180,

            "price": 30,

            "sellingPrice": 35,

            "cashier": "Tej Parker",

            "status": "failed"

        },

        {

            "customentName": "Gisele Yashar",

            "product": "juice",

            "supplier": "tropicana",

            "dateOfEntry": "2025-02-19T00:00:00",

            "quantity": 250,

            "price": 80,

            "sellingPrice": 90,

            "cashier": "Han Lue",

            "status": "closed"

        },

        {

            "customentName": "Hobbs",

            "product": "coffee",

            "supplier": "starbucks",

            "dateOfEntry": "2025-03-03T00:00:00",

            "quantity": 300,

            "price": 100,

            "sellingPrice": 110,

            "cashier": "Gisele Yashar",

            "status": "pending"

        },

        {

            "customentName": "Shaw",

            "product": "tea",

            "supplier": "lipton",

            "dateOfEntry": "",

            "quantity": 400,

            "price": 50,

            "sellingPrice": 55,

            "cashier": "Hobbs",

            "status": "completed"

        },

        {

            "customentName": "Elena Neves",

            "product": "sugar",

            "supplier": "domino",

            "dateOfEntry": "",

            "quantity": 500,

            "price": 20,

            "sellingPrice": 25,

            "cashier": "Shaw",

            "status": "completed"

        },

        {

            "customentName": "Jakob Toretto",

            "product": "salt",

            "supplier": "morton",

            "dateOfEntry": "",

            "quantity": 600,

            "price": 10,

            "sellingPrice": 12,

            "cashier": "Elena Neves",

            "status": "completed"

        },

        {

            "customentName": "Cipher",

            "product": "pepper",

            "supplier": "mccormick",

            "dateOfEntry": "",

            "quantity": 700,

            "price": 15,

            "sellingPrice": 18,

            "cashier": "Jakob Toretto",

            "status": "completed"

        },

        {

            "customentName": "Mr. Nobody",

            "product": "rice",

            "supplier": "uncle ben's",

            "dateOfEntry": "",

            "quantity": 800,

            "price": 30,

            "sellingPrice": 35,

            "cashier": "Cipher",

            "status": "completed"

        },

        {

            "customentName": "Deckard Shaw",

            "product": "pasta",

            "supplier": "barilla",

            "dateOfEntry": "",

            "quantity": 900,

            "price": 40,

            "sellingPrice": 45,

            "cashier": "Mr. Nobody",

            "status": "completed"

        },

        {

            "customentName": "Magdalene Shaw",

            "product": "flour",

            "supplier": "gold medal",

            "dateOfEntry": "",

            "quantity": 1000,

            "price": 25,

            "sellingPrice": 30,

            "cashier": "Deckard Shaw",

            "status": "completed"

        },

        {

            "customentName": "Hattie Shaw",

            "product": "oats",

            "supplier": "quaker",

            "dateOfEntry": "",

            "quantity": 1100,

            "price": 35,

            "sellingPrice": 40,

            "cashier": "Magdalene Shaw",

            "status": "completed"

        },

        {

            "customentName": "Riley Hicks",

            "product": "honey",

            "supplier": "nature's nectar",

            "dateOfEntry": "",

            "quantity": 1200,

            "price": 50,

            "sellingPrice": 55,

            "cashier": "Hattie Shaw",

            "status": "completed"

        },

        {

            "customentName": "Samantha Hobbs",

            "product": "jam",

            "supplier": "smucker's",

            "dateOfEntry": "",

            "quantity": 1300,

            "price": 60,

            "sellingPrice": 65,

            "cashier": "Riley Hicks",

            "status": "completed"

        },

        {

            "customentName": "Tego Leo",

            "product": "peanut butter",

            "supplier": "jif",

            "dateOfEntry": "",

            "quantity": 1400,

            "price": 70,

            "sellingPrice": 75,

            "cashier": "Samantha Hobbs",

            "status": "completed"

        }

    ],

    "stockInventoryAnalysisChartData": [

        {

            "date": "2025-02-24T09:15:00Z",

            "numOfActiveOrders": 1,

            "numOfInactiveOrders": 35

        },

        {

            "date": "2025-02-25T09:15:00Z",

            "numOfActiveOrders": 57,

            "numOfInactiveOrders": 199

        },

        {

            "date": "2025-02-26T09:15:00Z",

            "numOfActiveOrders": 110,

            "numOfInactiveOrders": 197

        },

        {

            "date": "2025-02-27T09:15:00Z",

            "numOfActiveOrders": 12,

            "numOfInactiveOrders": 45

        },

        {

            "date": "2025-02-28T09:15:00Z",

            "numOfActiveOrders": 177,

            "numOfInactiveOrders": 66

        },

        {

            "date": "2025-03-01T09:15:00Z",

            "numOfActiveOrders": 89,

            "numOfInactiveOrders": 12

        },

        {

            "date": "2025-03-02T09:15:00Z",

            "numOfActiveOrders": 99,

            "numOfInactiveOrders": 158

        },

        {

            "date": "2025-02-01T09:15:00Z",

            "numOfActiveOrders": 12,

            "numOfInactiveOrders": 122

        },

        {

            "date": "2025-02-05T09:15:00Z",

            "numOfActiveOrders": 19,

            "numOfInactiveOrders": 66

        },

        {

            "date": "2025-02-08T09:15:00Z",

            "numOfActiveOrders": 120,

            "numOfInactiveOrders": 4

        },

        {

            "date": "2025-02-12T09:15:00Z",

            "numOfActiveOrders": 170,

            "numOfInactiveOrders": 20

        },

        {

            "date": "2025-02-16T09:15:00Z",

            "numOfActiveOrders": 98,

            "numOfInactiveOrders": 186

        },

        {

            "date": "2025-02-19T09:15:00Z",

            "numOfActiveOrders": 77,

            "numOfInactiveOrders": 45

        },

        {

            "date": "2025-02-23T09:15:00Z",

            "numOfActiveOrders": 44,

            "numOfInactiveOrders": 101

        },

        {

            "date": "2024-11-01T09:15:00Z",

            "numOfActiveOrders": 101,

            "numOfInactiveOrders": 18

        },

        {

            "date": "2024-11-10T09:15:00Z",

            "numOfActiveOrders": 180,

            "numOfInactiveOrders": 200

        },

        {

            "date": "2024-11-20T09:15:00Z",

            "numOfActiveOrders": 72,

            "numOfInactiveOrders": 15

        },

        {

            "date": "2024-11-30T09:15:00Z",

            "numOfActiveOrders": 108,

            "numOfInactiveOrders": 99

        },

        {

            "date": "2024-12-10T09:15:00Z",

            "numOfActiveOrders": 199,

            "numOfInactiveOrders": 42

        },

        {

            "date": "2024-12-20T09:15:00Z",

            "numOfActiveOrders": 66,

            "numOfInactiveOrders": 55

        },

        {

            "date": "2024-12-30T09:15:00Z",

            "numOfActiveOrders": 144,

            "numOfInactiveOrders": 87

        },

        {

            "date": "2025-01-15T09:15:00Z",

            "numOfActiveOrders": 20,

            "numOfInactiveOrders": 145

        },

        {

            "date": "2024-05-01T09:15:00Z",

            "numOfActiveOrders": 88,

            "numOfInactiveOrders": 0

        },

        {

            "date": "2024-05-15T09:15:00Z",

            "numOfActiveOrders": 123,

            "numOfInactiveOrders": 19

        },

        {

            "date": "2024-06-01T09:15:00Z",

            "numOfActiveOrders": 199,

            "numOfInactiveOrders": 10

        },

        {

            "date": "2024-06-15T09:15:00Z",

            "numOfActiveOrders": 77,

            "numOfInactiveOrders": 45

        },

        {

            "date": "2024-07-01T09:15:00Z",

            "numOfActiveOrders": 6,

            "numOfInactiveOrders": 180

        },

        {

            "date": "2024-08-01T09:15:00Z",

            "numOfActiveOrders": 101,

            "numOfInactiveOrders": 99

        },

        {

            "date": "2024-09-01T09:15:00Z",

            "numOfActiveOrders": 165,

            "numOfInactiveOrders": 53

        },

        {

            "date": "2024-10-01T09:15:00Z",

            "numOfActiveOrders": 0,

            "numOfInactiveOrders": 200

        }

    ],

    "stockInventoryOrdersChartData": [

        {

            "date": "2025-02-24T09:15:00Z",

            "numOfAvailableStock": 1,

            "numOfUnvailableStock": 35

        },

        {

            "date": "2025-02-25T09:15:00Z",

            "numOfAvailableStock": 57,

            "numOfUnvailableStock": 199

        },

        {

            "date": "2025-02-26T09:15:00Z",

            "numOfAvailableStock": 110,

            "numOfUnvailableStock": 197

        },

        {

            "date": "2025-02-27T09:15:00Z",

            "numOfAvailableStock": 12,

            "numOfUnvailableStock": 45

        },

        {

            "date": "2025-02-28T09:15:00Z",

            "numOfAvailableStock": 177,

            "numOfUnvailableStock": 66

        },

        {

            "date": "2025-03-01T09:15:00Z",

            "numOfAvailableStock": 89,

            "numOfUnvailableStock": 12

        },

        {

            "date": "2025-03-02T09:15:00Z",

            "numOfAvailableStock": 99,

            "numOfUnvailableStock": 158

        },

        {

            "date": "2025-02-01T09:15:00Z",

            "numOfAvailableStock": 12,

            "numOfUnvailableStock": 122

        },

        {

            "date": "2025-02-05T09:15:00Z",

            "numOfAvailableStock": 19,

            "numOfUnvailableStock": 66

        },

        {

            "date": "2025-02-08T09:15:00Z",

            "numOfAvailableStock": 120,

            "numOfUnvailableStock": 4

        },

        {

            "date": "2025-02-12T09:15:00Z",

            "numOfAvailableStock": 170,

            "numOfUnvailableStock": 20

        },

        {

            "date": "2025-02-16T09:15:00Z",

            "numOfAvailableStock": 98,

            "numOfUnvailableStock": 186

        },

        {

            "date": "2025-02-19T09:15:00Z",

            "numOfAvailableStock": 77,

            "numOfUnvailableStock": 45

        },

        {

            "date": "2025-02-23T09:15:00Z",

            "numOfAvailableStock": 44,

            "numOfUnvailableStock": 101

        },

        {

            "date": "2024-11-01T09:15:00Z",

            "numOfAvailableStock": 101,

            "numOfUnvailableStock": 18

        },

        {

            "date": "2024-11-10T09:15:00Z",

            "numOfAvailableStock": 180,

            "numOfUnvailableStock": 200

        },

        {

            "date": "2024-11-20T09:15:00Z",

            "numOfAvailableStock": 72,

            "numOfUnvailableStock": 15

        },

        {

            "date": "2024-11-30T09:15:00Z",

            "numOfAvailableStock": 108,

            "numOfUnvailableStock": 99

        },

        {

            "date": "2024-12-10T09:15:00Z",

            "numOfAvailableStock": 199,

            "numOfUnvailableStock": 42

        },

        {

            "date": "2024-12-20T09:15:00Z",

            "numOfAvailableStock": 66,

            "numOfUnvailableStock": 55

        },

        {

            "date": "2024-12-30T09:15:00Z",

            "numOfAvailableStock": 144,

            "numOfUnvailableStock": 87

        },

        {

            "date": "2025-01-15T09:15:00Z",

            "numOfAvailableStock": 20,

            "numOfUnvailableStock": 145

        },

        {

            "date": "2024-05-01T09:15:00Z",

            "numOfAvailableStock": 88,

            "numOfUnvailableStock": 0

        },

        {

            "date": "2024-05-15T09:15:00Z",

            "numOfAvailableStock": 123,

            "numOfUnvailableStock": 19

        },

        {

            "date": "2024-06-01T09:15:00Z",

            "numOfAvailableStock": 199,

            "numOfUnvailableStock": 10

        },

        {

            "date": "2024-06-15T09:15:00Z",

            "numOfAvailableStock": 77,

            "numOfUnvailableStock": 45

        },

        {

            "date": "2024-07-01T09:15:00Z",

            "numOfAvailableStock": 6,

            "numOfUnvailableStock": 180

        },

        {

            "date": "2024-08-01T09:15:00Z",

            "numOfAvailableStock": 101,

            "numOfUnvailableStock": 99

        },

        {

            "date": "2024-09-01T09:15:00Z",

            "numOfAvailableStock": 165,

            "numOfUnvailableStock": 53

        },

        {

            "date": "2024-10-01T09:15:00Z",

            "numOfAvailableStock": 0,

            "numOfUnvailableStock": 200

        }

    ],

    "shipmentsList": [

        {

            "id": "LP-1234-628-721035",

            "shipperName": "Dominic Toretto",

            "phoneNo.": "9894989490",

            "status": "completed",

            "product": "cornflakes",

            "supplier": "farm fresh",

            "quantity": 250,

            "price": 184,

            "deliveryDate": "2025-02-27T00:00:00",

            "consignee": "Brain o'Conner",

            "destination": "Bengaluru",

            "connection": "Online",

            "task": "Cash Management"

          },

          {

            "id": "LP-1234-628-721036",

            "shipperName": "Dominic",

            "phoneNo.": "9800123456",

            "status": "in-transit",

            "product": "cornflakes",

            "supplier": "farm fresh",

            "quantity": 250,

            "price": 295,

            "deliveryDate": "2025-03-12T00:00:00",

            "consignee": "Brain Copper",

            "destination": "Delhi",

            "connection": "Offline",

            "task": "Financial Reporting"

          },

          {

            "id": "LP-1234-628-721037",

            "shipperName": "Letty Ortiz",

            "phoneNo.": "9812345678",

            "status": "pending",

            "product": "milk",

            "supplier": "dairyland",

            "quantity": 300,

            "price": 150,

            "deliveryDate": "2025-03-10T00:00:00",

            "consignee": "Mia Toretto",

            "destination": "Mumbai",

            "connection": "Online",

            "task": "Vendors & Contracts"

          },

          {

            "id": "LP-1234-628-721038",

            "shipperName": "Brian O'Conner",

            "phoneNo.": "9823456789",

            "status": "closed",

            "product": "bread",

            "supplier": "wonder",

            "quantity": 200,

            "price": 100,

            "deliveryDate": "2025-02-02T00:00:00",

            "consignee": "Roman Pearce",

            "destination": "Chennai",

            "connection": "Offline",

            "task": "Advertising"

          },

          {

            "id": "LP-1234-628-721039",

            "shipperName": "Mia Toretto",

            "phoneNo.": "9834567890",

            "status": "failed",

            "product": "eggs",

            "supplier": "farm fresh",

            "quantity": 150,

            "price": 75,

            "deliveryDate": "2025-03-03T00:00:00",

            "consignee": "Tej Parker",

            "destination": "Kolkata",

            "connection": "Online",

            "task": "Cash Management"

          },

          {

            "id": "LP-1234-628-721040",

            "shipperName": "Tej Parker",

            "phoneNo.": "9845678901",

            "status": "completed",

            "product": "butter",

            "supplier": "amul",

            "quantity": 100,

            "price": 50,

            "deliveryDate": "2025-03-04T00:00:00",

            "consignee": "Han Lue",

            "destination": "Pune",

            "connection": "Offline",

            "task": "Financial Reporting"

          },

          {

            "id": "LP-1234-628-721041",

            "shipperName": "Han Lue",

            "phoneNo.": "9856789012",

            "status": "in-transit",

            "product": "cheese",

            "supplier": "kraft",

            "quantity": 120,

            "price": 60,

            "deliveryDate": "2025-03-06T00:00:00",

            "consignee": "Gisele Yashar",

            "destination": "Hyderabad",

            "connection": "Online",

            "task": "Vendors & Contracts"

          },

          {

            "id": "LP-1234-628-721042",

            "shipperName": "Gisele Yashar",

            "phoneNo.": "9867890123",

            "status": "pending",

            "product": "yogurt",

            "supplier": "chobani",

            "quantity": 180,

            "price": 90,

            "deliveryDate": "2025-03-08T00:00:00",

            "consignee": "Hobbs",

            "destination": "Ahmedabad",

            "connection": "Offline",

            "task": "Advertising"

          },

          {

            "id": "LP-1234-628-721043",

            "shipperName": "Hobbs",

            "phoneNo.": "9878901234",

            "status": "closed",

            "product": "juice",

            "supplier": "tropicana",

            "quantity": 250,

            "price": 125,

            "deliveryDate": "2025-02-07T00:00:00",

            "consignee": "Shaw",

            "destination": "Surat",

            "connection": "Online",

            "task": "Cash Management"

          },

          {

            "id": "LP-1234-628-721044",

            "shipperName": "Shaw",

            "phoneNo.": "9889012345",

            "status": "failed",

            "product": "coffee",

            "supplier": "starbucks",

            "quantity": 300,

            "price": 150,

            "deliveryDate": "2025-02-08T00:00:00",

            "consignee": "Elena Neves",

            "destination": "Jaipur",

            "connection": "Offline",

            "task": "Financial Reporting"

          },

          {

            "id": "LP-1234-628-721045",

            "shipperName": "Elena Neves",

            "phoneNo.": "9890123456",

            "status": "completed",

            "product": "tea",

            "supplier": "lipton",

            "quantity": 400,

            "price": 200,

            "deliveryDate": "2025-02-09T00:00:00",

            "consignee": "Jakob Toretto",

            "destination": "Lucknow",

            "connection": "Online",

            "task": "Vendors & Contracts"

          },

          {

            "id": "LP-1234-628-721046",

            "shipperName": "Jakob Toretto",

            "phoneNo.": "9901234567",

            "status": "in-transit",

            "product": "sugar",

            "supplier": "domino",

            "quantity": 500,

            "price": 250,

            "deliveryDate": "2025-03-10T00:00:00",

            "consignee": "Cipher",

            "destination": "Kanpur",

            "connection": "Offline",

            "task": "Advertising"

          },

          {

            "id": "LP-1234-628-721047",

            "shipperName": "Cipher",

            "phoneNo.": "9912345678",

            "status": "pending",

            "product": "salt",

            "supplier": "morton",

            "quantity": 600,

            "price": 300,

            "deliveryDate": "2025-03-11T00:00:00",

            "consignee": "Mr. Nobody",

            "destination": "Nagpur",

            "connection": "Online",

            "task": "Cash Management"

          },

          {

            "id": "LP-1234-628-721048",

            "shipperName": "Mr. Nobody",

            "phoneNo.": "9923456789",

            "status": "closed",

            "product": "pepper",

            "supplier": "mccormick",

            "quantity": 700,

            "price": 350,

            "deliveryDate": "2025-02-12T00:00:00",

            "consignee": "Deckard Shaw",

            "destination": "Indore",

            "connection": "Offline",

            "task": "Financial Reporting"

          },

          {

            "id": "LP-1234-628-721049",

            "shipperName": "Deckard Shaw",

            "phoneNo.": "9934567890",

            "status": "failed",

            "product": "rice",

            "supplier": "uncle ben's",

            "quantity": 800,

            "price": 400,

            "deliveryDate": "2025-02-13T00:00:00",

            "consignee": "Magdalene Shaw",

            "destination": "Thane",

            "connection": "Online",

            "task": "Vendors & Contracts"

          },

          {

            "id": "LP-1234-628-721050",

            "shipperName": "Magdalene Shaw",

            "phoneNo.": "9945678901",

            "status": "completed",

            "product": "pasta",

            "supplier": "barilla",

            "quantity": 900,

            "price": 450,

            "deliveryDate": "2025-03-01T00:00:00",

            "consignee": "Hattie Shaw",

            "destination": "Bhopal",

            "connection": "Offline",

            "task": "Advertising"

          },

          {

            "id": "LP-1234-628-721051",

            "shipperName": "Hattie Shaw",

            "phoneNo.": "9956789012",

            "status": "in-transit",

            "product": "flour",

            "supplier": "gold medal",

            "quantity": 1000,

            "price": 500,

            "deliveryDate": "2025-03-15T00:00:00",

            "consignee": "Riley Hicks",

            "destination": "Visakhapatnam",

            "connection": "Online",

            "task": "Cash Management"

          },

          {

            "id": "LP-1234-628-721052",

            "shipperName": "Riley Hicks",

            "phoneNo.": "9967890123",

            "status": "pending",

            "product": "oats",

            "supplier": "quaker",

            "quantity": 1100,

            "price": 550,

            "deliveryDate": "2025-03-16T00:00:00",

            "consignee": "Samantha Hobbs",

            "destination": "Patna",

            "connection": "Offline",

            "task": "Financial Reporting"

          },

          {

            "id": "LP-1234-628-721053",

            "shipperName": "Samantha Hobbs",

            "phoneNo.": "9978901234",

            "status": "closed",

            "product": "honey",

            "supplier": "nature's nectar",

            "quantity": 1200,

            "price": 600,

            "deliveryDate": "2025-02-17T00:00:00",

            "consignee": "Tego Leo",

            "destination": "Vadodara",

            "connection": "Online",

            "task": "Vendors & Contracts"

          },

          {

            "id": "LP-1234-628-721054",

            "shipperName": "Tego Leo",

            "phoneNo.": "9989012345",

            "status": "failed",

            "product": "jam",

            "supplier": "smucker's",

            "quantity": 1300,

            "price": 650,

            "deliveryDate": "2025-03-18T00:00:00",

            "consignee": "Roman Pearce",

            "destination": "Ghaziabad",

            "connection": "Offline",

            "task": "Advertising"

          },

          {

            "id": "LP-1234-628-721055",

            "shipperName": "Roman Pearce",

            "phoneNo.": "9990123456",

            "status": "completed",

            "product": "peanut butter",

            "supplier": "jif",

            "quantity": 1400,

            "price": 700,

            "deliveryDate": "2025-02-19T00:00:00",

            "consignee": "Dominic Toretto",

            "destination": "Ludhiana",

            "connection": "Online",

            "task": "Cash Management"

          },

          {

            "id": "LP-1234-628-721056",

            "shipperName": "Dominic Toretto",

            "phoneNo.": "9894989490",

            "status": "in-transit",

            "product": "cornflakes",

            "supplier": "kellogs",

            "quantity": 250,

            "price": 184,

            "deliveryDate": "2025-03-20T00:00:00",

            "consignee": "Brian O'Conner",

            "destination": "Agra",

            "connection": "Offline",

            "task": "Financial Reporting"

          },

          {

            "id": "LP-1234-628-721057",

            "shipperName": "Dominic",

            "phoneNo.": "9800123456",

            "status": "pending",

            "product": "cornflakes",

            "supplier": "kellogs",

            "quantity": 250,

            "price": 295,

            "deliveryDate": "2025-03-21T00:00:00",

            "consignee": "Brian Copper",

            "destination": "Nashik",

            "connection": "Online",

            "task": "Vendors & Contracts"

          },

          {

            "id": "LP-1234-628-721058",

            "shipperName": "Letty Ortiz",

            "phoneNo.": "9812345678",

            "status": "closed",

            "product": "milk",

            "supplier": "dairyland",

            "quantity": 300,

            "price": 150,

            "deliveryDate": "2025-02-22T00:00:00",

            "consignee": "Mia Toretto",

            "destination": "Faridabad",

            "connection": "Offline",

            "task": "Advertising"

          },

          {

            "id": "LP-1234-628-721059",

            "shipperName": "Brian O'Conner",

            "phoneNo.": "9823456789",

            "status": "failed",

            "product": "bread",

            "supplier": "wonder",

            "quantity": 200,

            "price": 100,

            "deliveryDate": "2025-02-23T00:00:00",

            "consignee": "Roman Pearce",

            "destination": "Meerut",

            "connection": "Online",

            "task": "Cash Management"

          },

          {

            "id": "LP-1234-628-721060",

            "shipperName": "Mia Toretto",

            "phoneNo.": "9834567890",

            "status": "completed",

            "product": "eggs",

            "supplier": "farm fresh",

            "quantity": 150,

            "price": 75,

            "deliveryDate": "2025-02-24T00:00:00",

            "consignee": "Tej Parker",

            "destination": "Rajkot",

            "connection": "Offline",

            "task": "Financial Reporting"

          },

          {

            "id": "LP-1234-628-721061",

            "shipperName": "Tej Parker",

            "phoneNo.": "9845678901",

            "status": "in-transit",

            "product": "butter",

            "supplier": "amul",

            "quantity": 100,

            "price": 50,

            "deliveryDate": "2025-03-06T00:00:00",

            "consignee": "Han Lue",

            "destination": "Varanasi",

            "connection": "Online",

            "task": "Vendors & Contracts"

          },

          {

            "id": "LP-1234-628-721062",

            "shipperName": "Han Lue",

            "phoneNo.": "9856789012",

            "status": "pending",

            "product": "cheese",

            "supplier": "kraft",

            "quantity": 120,

            "price": 60,

            "deliveryDate": "2025-03-26T00:00:00",

            "consignee": "Gisele Yashar",

            "destination": "Srinagar",

            "connection": "Offline",

            "task": "Advertising"

          },

          {

            "id": "LP-1234-628-721063",

            "shipperName": "Gisele Yashar",

            "phoneNo.": "9867890123",

            "status": "closed",

            "product": "yogurt",

            "supplier": "chobani",

            "quantity": 180,

            "price": 90,

            "deliveryData": "2025-02-27T00:00:00",

            "consignee": "Hobbs",

            "destination": "Aurangabad",

            "connection": "Online",

            "task": "Cash Management"

          },

          {

            "id": "LP-1234-628-721064",

            "shipperName": "Hobbs",

            "phoneNo.": "9878901234",

            "status": "failed",

            "product": "juice",

            "supplier": "tropicana",

            "quantity": 250,

            "price": 125,

            "deliveryDate": "2025-02-28T00:00:00",

            "consignee": "Shaw",

            "destination": "Dhanbad",

            "connection": "Offline",

            "task": "Financial Reporting"

          }

    ],

    "shipmentsTracking": [

        {

            "lat": "",

            "long": ""

        },

        {

            "lat": "",

            "long": ""

        },{

            "lat": "",

            "long": ""

        },{

            "lat": "",

            "long": ""

        },{

            "lat": "",

            "long": ""

        },{

            "lat": "",

            "long": ""

        },{

            "lat": "",

            "long": ""

        },{

            "lat": "",

            "long": ""

        },{

            "lat": "",

            "long": ""

        }

    ],

    "suppliers": [

        {

            "id": "001",

            "name": "John Smith"

        },

        {

            "id": "002",

            "name": "Jane Doe"

        },

        {

            "id": "003",

            "name": "Alice Johnson"

        },

        {

            "id": "004",

            "name": "Robert Brown"

        },

        {

            "id": "005",

            "name": "Emily Davis"

        },

        {

            "id": "006",

            "name": "Michael Wilson"

        },

        {

            "id": "007",

            "name": "Sarah Miller"

        },

        {

            "id": "008",

            "name": "David Anderson"

        },

        {

            "id": "009",

            "name": "Laura Thomas"

        },

        {

            "id": "010",

            "name": "James Jackson"

        },

        {

            "id": "011",

            "name": "Linda White"

        },

        {

            "id": "012",

            "name": "Christopher Harris"

        },

        {

            "id": "013",

            "name": "Karen Martin"

        },

        {

            "id": "014",

            "name": "Daniel Thompson"

        },

        {

            "id": "015",

            "name": "Nancy Garcia"

        },

        {

            "id": "016",

            "name": "Matthew Martinez"

        },

        {

            "id": "017",

            "name": "Betty Robinson"

        },

        {

            "id": "018",

            "name": "Joshua Clark"

        },

        {

            "id": "019",

            "name": "Jessica Rodriguez"

        },

        {

            "id": "020",

            "name": "Andrew Lewis"

        }

    ],

    "assignees": [

        {

            "id": "021",

            "name": "William King"

        },

        {

            "id": "022",

            "name": "Olivia Scott"

        },

        {

            "id": "023",

            "name": "Henry Adams"

        },

        {

            "id": "024",

            "name": "Sophia Baker"

        },

        {

            "id": "025",

            "name": "Liam Carter"

        },

        {

            "id": "026",

            "name": "Isabella Perez"

        },

        {

            "id": "027",

            "name": "Mason Turner"

        },

        {

            "id": "028",

            "name": "Mia Collins"

        },

        {

            "id": "029",

            "name": "Ethan Stewart"

        },

        {

            "id": "030",

            "name": "Ava Sanchez"

        },

        {

            "id": "031",

            "name": "Logan Morris"

        },

        {

            "id": "032",

            "name": "Charlotte Rogers"

        },

        {

            "id": "033",

            "name": "Lucas Reed"

        },

        {

            "id": "034",

            "name": "Amelia Cook"

        },

        {

            "id": "035",

            "name": "Alexander Morgan"

        },

        {

            "id": "036",

            "name": "Harper Bell"

        },

        {

            "id": "037",

            "name": "Benjamin Murphy"

        },

        {

            "id": "038",

            "name": "Evelyn Bailey"

        },

        {

            "id": "039",

            "name": "Elijah Rivera"

        },

        {

            "id": "040",

            "name": "Abigail Cooper"

        }

    ],

    "productType": [

      {

        "id": "001",

        "type": "Electronics"

      },

      {

        "id": "002",

        "type": "Furniture"

      },

      {

        "id": "003",

        "type": "Clothing"

      },

      {

        "id": "004",

        "type": "Books"

      },

      {

        "id": "005",

        "type": "Food & beverages"

      }

    ],

    "blogs": [

        {

            "id": "001",

            "title": "Title 1",

            "image": "image 1",

            "type": "Food",

            "descriptiton": "descriptiton descriptiton descriptiton descriptiton descriptiton",

            "publishedDate": "2025-02-27T00:00:00",

            "blogInfo": {

                "carouselImage": ["image1.jpeg", "image1.jpeg", "image1.jpeg"],

                "postBy": "Firstname lastName",

                "desc": ""

            }

        }

    ],

    "taskTypes": [

        {

            "id": "001",

            "type": "Cash Management"

        },

        {

            "id": "002",

            "type": "Financial Reporting"

        },

        {

            "id": "003",

            "type": "Vendors & Contracts"

        },

        {

            "id": "004",

            "type": "Advertising"

        }

    ]

}

================
File: src/index.html
================
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Grocerystore</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body>
  <app-root></app-root>
</body>
</html>

================
File: src/main.server.ts
================
import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { config } from './app/app.config.server';

const bootstrap = () => bootstrapApplication(AppComponent, config);

export default bootstrap;

================
File: src/main.ts
================
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));

================
File: src/server.ts
================
import {
  AngularNodeAppEngine,
  createNodeRequestHandler,
  isMainModule,
  writeResponseToNodeResponse,
} from '@angular/ssr/node';
import express from 'express';
import { dirname, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';

const serverDistFolder = dirname(fileURLToPath(import.meta.url));
const browserDistFolder = resolve(serverDistFolder, '../browser');

const app = express();
const angularApp = new AngularNodeAppEngine();

/**
 * Example Express Rest API endpoints can be defined here.
 * Uncomment and define endpoints as necessary.
 *
 * Example:
 * ```ts
 * app.get('/api/**', (req, res) => {
 *   // Handle API request
 * });
 * ```
 */

/**
 * Serve static files from /browser
 */
app.use(
  express.static(browserDistFolder, {
    maxAge: '1y',
    index: false,
    redirect: false,
  }),
);

/**
 * Handle all other requests by rendering the Angular application.
 */
app.use('/**', (req, res, next) => {
  angularApp
    .handle(req)
    .then((response) =>
      response ? writeResponseToNodeResponse(response, res) : next(),
    )
    .catch(next);
});

/**
 * Start the server if this module is the main entry point.
 * The server listens on the port defined by the `PORT` environment variable, or defaults to 4000.
 */
if (isMainModule(import.meta.url)) {
  const port = process.env['PORT'] || 4000;
  app.listen(port, () => {
    console.log(`Node Express server listening on http://localhost:${port}`);
  });
}

/**
 * Request handler used by the Angular CLI (for dev-server and during build) or Firebase Cloud Functions.
 */
export const reqHandler = createNodeRequestHandler(app);

================
File: src/styles.css
================
@import '@angular/material/prebuilt-themes/indigo-pink.css';

html, body { 
  height: 100%; 
  margin: 0; 
  font-family: Roboto, "Helvetica Neue", sans-serif; 
}

body { 
  margin: 0; 
  padding: 0;
  background-color: #f5f5f5;
}

.container {
  padding: 20px;
  margin: 0 auto;
  max-width: 1200px;
}

.flex {
  display: flex;
}

.flex-col {
  flex-direction: column;
}

.items-center {
  align-items: center;
}

.justify-center {
  justify-content: center;
}

.justify-between {
  justify-content: space-between;
}

.w-full {
  width: 100%;
}

.mt-4 {
  margin-top: 1rem;
}

.mb-4 {
  margin-bottom: 1rem;
}

.page-title {
  font-size: 1.5rem;
  font-weight: 500;
  color: #333;
  margin-bottom: 1rem;
}

================
File: tsconfig.app.json
================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": [
      "node"
    ]
  },
  "files": [
    "src/main.ts",
    "src/main.server.ts",
    "src/server.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}

================
File: tsconfig.json
================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "outDir": "./dist/out-tsc",
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "skipLibCheck": true,
    "isolatedModules": true,
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "moduleResolution": "bundler",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022"
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}

================
File: tsconfig.spec.json
================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}



================================================================
End of Codebase
================================================================
